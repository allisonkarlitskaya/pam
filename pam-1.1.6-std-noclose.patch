diff -up Linux-PAM-1.1.6/modules/pam_mkhomedir/pam_mkhomedir.c.std-noclose Linux-PAM-1.1.6/modules/pam_mkhomedir/pam_mkhomedir.c
--- Linux-PAM-1.1.6/modules/pam_mkhomedir/pam_mkhomedir.c.std-noclose	2012-08-15 13:08:43.000000000 +0200
+++ Linux-PAM-1.1.6/modules/pam_mkhomedir/pam_mkhomedir.c	2013-04-23 17:07:46.565362820 +0200
@@ -133,13 +133,21 @@ create_homedir (pam_handle_t *pamh, opti
    if (child == 0) {
         int i;
         struct rlimit rlim;
+	int dummyfds[2];
 	static char *envp[] = { NULL };
 	char *args[] = { NULL, NULL, NULL, NULL, NULL };
 
+	/* replace std file descriptors with a dummy pipe */
+	if (pipe2(dummyfds, O_NONBLOCK) == 0) {
+		dup2(dummyfds[0], STDIN_FILENO);
+		dup2(dummyfds[1], STDOUT_FILENO);
+		dup2(dummyfds[1], STDERR_FILENO);
+	}
+
 	if (getrlimit(RLIMIT_NOFILE, &rlim)==0) {
           if (rlim.rlim_max >= MAX_FD_NO)
                 rlim.rlim_max = MAX_FD_NO;
-	  for (i=0; i < (int)rlim.rlim_max; i++) {
+	  for (i = STDERR_FILENO + 1; i < (int)rlim.rlim_max; i++) {
 		close(i);
 	  }
 	}
diff -up Linux-PAM-1.1.6/modules/pam_unix/pam_unix_acct.c.std-noclose Linux-PAM-1.1.6/modules/pam_unix/pam_unix_acct.c
--- Linux-PAM-1.1.6/modules/pam_unix/pam_unix_acct.c.std-noclose	2012-08-15 13:08:43.000000000 +0200
+++ Linux-PAM-1.1.6/modules/pam_unix/pam_unix_acct.c	2013-04-23 17:10:28.928870251 +0200
@@ -100,21 +100,26 @@ int _unix_run_verify_binary(pam_handle_t
   if (child == 0) {
     int i=0;
     struct rlimit rlim;
+    int dummyfds[2];
     static char *envp[] = { NULL };
     char *args[] = { NULL, NULL, NULL, NULL };
 
     /* reopen stdout as pipe */
     dup2(fds[1], STDOUT_FILENO);
 
+    /* replace std file descriptors with a dummy pipe */
+    if (pipe2(dummyfds, O_NONBLOCK) == 0) {
+      dup2(dummyfds[0], STDIN_FILENO);
+      dup2(dummyfds[1], STDERR_FILENO);
+    }
+
     /* XXX - should really tidy up PAM here too */
 
     if (getrlimit(RLIMIT_NOFILE,&rlim)==0) {
       if (rlim.rlim_max >= MAX_FD_NO)
         rlim.rlim_max = MAX_FD_NO;
-      for (i=0; i < (int)rlim.rlim_max; i++) {
-	if (i != STDOUT_FILENO) {
-	  close(i);
-	}
+      for (i = STDERR_FILENO + 1; i < (int)rlim.rlim_max; i++) {
+	close(i);
       }
     }
 
diff -up Linux-PAM-1.1.6/modules/pam_unix/pam_unix_passwd.c.std-noclose Linux-PAM-1.1.6/modules/pam_unix/pam_unix_passwd.c
--- Linux-PAM-1.1.6/modules/pam_unix/pam_unix_passwd.c.std-noclose	2012-08-15 13:08:43.000000000 +0200
+++ Linux-PAM-1.1.6/modules/pam_unix/pam_unix_passwd.c	2013-04-23 17:13:49.047499806 +0200
@@ -202,6 +202,7 @@ static int _unix_run_update_binary(pam_h
     if (child == 0) {
         int i=0;
         struct rlimit rlim;
+	int dummyfds[2];
 	static char *envp[] = { NULL };
 	char *args[] = { NULL, NULL, NULL, NULL, NULL, NULL };
         char buffer[16];
@@ -211,11 +212,17 @@ static int _unix_run_update_binary(pam_h
 	/* reopen stdin as pipe */
 	dup2(fds[0], STDIN_FILENO);
 
+	/* replace std file descriptors with a dummy pipe */
+	if (pipe2(dummyfds, O_NONBLOCK) == 0) {
+          dup2(dummyfds[1], STDOUT_FILENO);
+          dup2(dummyfds[1], STDERR_FILENO);
+	}
+
 	if (getrlimit(RLIMIT_NOFILE,&rlim)==0) {
 	  if (rlim.rlim_max >= MAX_FD_NO)
 	    rlim.rlim_max = MAX_FD_NO;
-	  for (i=0; i < (int)rlim.rlim_max; i++) {
-	    if (i != STDIN_FILENO)
+	  for (i = STDERR_FILENO + 1; i < (int)rlim.rlim_max; i++) {
+	    if (i != dummyfds[0])
 		close(i);
 	  }
 	}
diff -up Linux-PAM-1.1.6/modules/pam_unix/support.c.std-noclose Linux-PAM-1.1.6/modules/pam_unix/support.c
--- Linux-PAM-1.1.6/modules/pam_unix/support.c.std-noclose	2012-08-15 13:08:43.000000000 +0200
+++ Linux-PAM-1.1.6/modules/pam_unix/support.c	2013-04-23 17:16:47.505061373 +0200
@@ -462,6 +462,7 @@ static int _unix_run_helper_binary(pam_h
     if (child == 0) {
         int i=0;
         struct rlimit rlim;
+	int dummyfds[2];
 	static char *envp[] = { NULL };
 	char *args[] = { NULL, NULL, NULL, NULL };
 
@@ -470,11 +471,17 @@ static int _unix_run_helper_binary(pam_h
 	/* reopen stdin as pipe */
 	dup2(fds[0], STDIN_FILENO);
 
+        /* replace std file descriptors with a dummy pipe */
+        if (pipe2(dummyfds, O_NONBLOCK) == 0) {
+          dup2(dummyfds[1], STDOUT_FILENO);
+          dup2(dummyfds[1], STDERR_FILENO);
+        }
+
 	if (getrlimit(RLIMIT_NOFILE,&rlim)==0) {
           if (rlim.rlim_max >= MAX_FD_NO)
                 rlim.rlim_max = MAX_FD_NO;
-	  for (i=0; i < (int)rlim.rlim_max; i++) {
-		if (i != STDIN_FILENO)
+	  for (i = STDERR_FILENO + 1; i < (int)rlim.rlim_max; i++) {
+		if (i != dummyfds[0])
 		  close(i);
 	  }
 	}
